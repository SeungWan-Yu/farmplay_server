<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="recruitMapper">

    <sql id="selectBoardColumn">
        SELECT 
             recruitCode
            ,recruitFarmCode
            ,recruitState
            ,recruitUserId
            ,recruitStart
            ,recruitEnd
            ,recruitJobStart
            ,recruitJobEnd
            ,recruitJobKind
            ,recruitMealProvide
            ,recruitMealVeget
            ,recruitMealMemo
            ,recruitChkFampler
            ,recruitChkPeriod
            ,recruitChkMinor
            ,recruitChkMinorMemo
            ,recruitChkMax
            ,recruitChkSummary
            ,recruitRegDate
            ,recruitEndDate
    </sql>    


    <!-- 모집리스트 모집완료 업데이트 -->
    <select id="updateRecruitList">
        UPDATE 
            recruit 
        SET 
            recruitState    =  '모집완료' ,
            recruitEndDate  = NOW()
        WHERE 
            recruitCode IN (
                <foreach collection="recruitList" item="i" separator=" , "> 	
			        #{i.recruitCode}
		        </foreach>
            )
    </select>

    <!-- 모집정보 마감예정 리스트 -->
    <select id="getRecruitEndList">
        SELECT 
             recruitCode
            ,recruitEnd
        FROM
             recruit 
             <![CDATA[WHERE recruitEnd <= CURDATE() - INTERVAL 0 DAY AND recruitState = "모집중"]]>
    </select>

    <!-- 모집정보 가져오기(모집코드)-->
    <select id="getRecruit">
        <include refid="selectBoardColumn"></include>
        FROM 
            recruit 
        WHERE 
            recruitCode = #{recruitcode};
    </select>

    <!-- 모집정보 가져오기(팜코드)-->
    <select id="getRecruitListFarmcode">
        <include refid="selectBoardColumn"></include>
        FROM 
            recruit
        WHERE 
            recruitFarmCode = #{farmCode}
           ORDER BY recruitRegDate DESC   
    </select>

    <!-- 모집정보 가져오기(유저아이디)-->
    <select id="getrecruitListId">
        <include refid="selectBoardColumn"></include>
        FROM 
            recruit
        WHERE 
            recruitUserId = #{userId};
    </select>

    <!-- 모집등록 -->
    <insert id="addRecruit">
        INSERT INTO recruit 
            ( recruitFarmCode
            , recruitState
            , recruitUserId
            , recruitStart
            , recruitEnd
            , recruitJobStart
            , recruitJobEnd
            , recruitJobKind
            , recruitMealProvide
            , recruitMealVeget
            , recruitMealMemo
            , recruitChkFampler
            , recruitChkPeriod
            , recruitChkMinor
            , recruitChkMinorMemo
            , recruitChkMax
            , recruitChkSummary 
            ,recruitRegDate ) 
        VALUES 
            ( #{recruitFarmCode}
            , #{recruitState}
            , #{recruitUserId}
            , #{recruitStart}
            , #{recruitEnd}
            , #{recruitJobStart}
            , #{recruitJobEnd}
            , #{recruitJobKind}
            , #{recruitMealProvide}
            , #{recruitMealVeget}
            , #{recruitMealMemo}
            , #{recruitChkFampler}
            , #{recruitChkPeriod}
            , #{recruitChkMinor}
            , #{recruitChkMinorMemo}
            , #{recruitChkMax}
            , #{recruitChkSummary}
            , NOW());
    </insert>

    <!-- 모집수정 -->
    <update id="updateReruit">
        UPDATE recruit 
        SET 
             recruitStart       = #{recruitStart}
            ,recruitEnd         = #{recruitEnd}
            ,recruitJobStart    = #{recruitJobStart}
            ,recruitJobEnd      = #{recruitJobEnd}
            ,recruitJobKind     = #{recruitJobKind}
            ,recruitMealProvide = #{recruitMealProvide}
            ,recruitMealVeget   = #{recruitMealVeget}
            ,recruitMealMemo    = #{recruitMealMemo}
            ,recruitChkFampler  = #{recruitChkFampler}
            ,recruitChkPeriod   = #{recruitChkPeriod}
            ,recruitChkMinor    = #{recruitChkMinor}
            ,recruitChkMinorMemo= #{recruitChkMinorMemo}
            ,recruitChkMax      = #{recruitChkMax}
            ,recruitChkSummary  = #{recruitChkSummary}
        WHERE 
             recruitCode        = #{recruitCode}
    </update>

     <!-- 모집마감 -->
    <update id="updateReruitState">
        UPDATE 
            recruit 
        SET 
            recruitState    =  #{recruitState} ,
            recruitEndDate  = NOW()
        WHERE 
            recruitCode     = #{recruitcode}
    </update>


    <!-- 모집마감 상태 변경 팜플러 정보 가져오기-->
    <select id="getEnterEndFarmplerList">
        SELECT 
             enterCode
            ,enterrecruitCode
            ,enterUserId
            ,enterState
	    FROM 
            farmpler 
        WHERE 
        enterrecruitCode = #{recruitcode}
        <if test="recruitState=='모집완료'">
            AND (enterState IN ("참가신청중","참가수정요청"))
        </if>
        
    </select>


      <!-- 업데이트 유저가 참가수정요청-->
    <update id="updateEnterEdit">
        UPDATE farmpler 
        SET 
             enterEditDate  = NOW()
            ,enterEditReson = '농가취소(모집마감 또는 취소)'
            ,enterState     = '참가취소됨'
        WHERE enterCode IN
            <foreach collection="enterList" item="enter" separator="," open="(" close=")">
            #{enter.enterCode}
            </foreach>
    </update>

    
    <!-- 모집삭제 -->
    <delete id="removeRecruit">
        DELETE FROM 
            recruit 
        WHERE 
            recruitCode = #{recruitcode}
    </delete>


</mapper>